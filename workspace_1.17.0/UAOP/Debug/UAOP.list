
UAOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08002f8c  08002f8c  00003f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003184  08003184  0000508c  2**0
                  CONTENTS
  4 .ARM          00000008  08003184  08003184  00004184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800318c  0800318c  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800318c  0800318c  0000418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003190  08003190  00004190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08003194  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000008c  08003220  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003220  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae98  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b0  00000000  00000000  0000ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f3  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019949  00000000  00000000  00012c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d92d  00000000  00000000  0002c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fae  00000000  00000000  00039ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003530  00000000  00000000  000d2ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d63f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f74 	.word	0x08002f74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000090 	.word	0x20000090
 8000220:	08002f74 	.word	0x08002f74

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b0ca      	sub	sp, #296	@ 0x128
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fc1f 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f9bb 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 fa87 	bl	8000754 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000246:	f000 f9f3 	bl	8000630 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800024a:	f000 fa59 	bl	8000700 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  char buffer[100];
  uint8_t dado;
  int index = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

  HAL_TIM_Base_Start(&htim1);
 8000254:	48b0      	ldr	r0, [pc, #704]	@ (8000518 <main+0x2e4>)
 8000256:	f001 fb7b 	bl	8001950 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_UART_Receive(&huart1, &dado, 1, HAL_MAX_DELAY);
 800025a:	f107 01a7 	add.w	r1, r7, #167	@ 0xa7
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	2201      	movs	r2, #1
 8000264:	48ad      	ldr	r0, [pc, #692]	@ (800051c <main+0x2e8>)
 8000266:	f001 ffca 	bl	80021fe <HAL_UART_Receive>

	if (dado == '\r') // Verifica se é o fim da palavra (Enter)
 800026a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800026e:	2b0d      	cmp	r3, #13
 8000270:	f040 8135 	bne.w	80004de <main+0x2aa>
	{
		buffer[index] = '\0'; // Termina a string
 8000274:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800027c:	4413      	add	r3, r2
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
		trim_whitespace(buffer); // Remove espaços em branco e caracteres invisíveis
 8000282:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f95a 	bl	8000540 <trim_whitespace>

		int found = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		for (int i = 0; i < NUM_SAIDAS; i++)
 8000292:	2300      	movs	r3, #0
 8000294:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000298:	e074      	b.n	8000384 <main+0x150>
		{
			if (strstr(buffer, OUT[i]) != NULL)
 800029a:	4aa1      	ldr	r2, [pc, #644]	@ (8000520 <main+0x2ec>)
 800029c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80002a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80002a8:	4611      	mov	r1, r2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f9c4 	bl	8002638 <strstr>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d061      	beq.n	800037a <main+0x146>
			{
				// Ações para as saídas
				switch (i)
 80002b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80002ba:	2b07      	cmp	r3, #7
 80002bc:	d842      	bhi.n	8000344 <main+0x110>
 80002be:	a201      	add	r2, pc, #4	@ (adr r2, 80002c4 <main+0x90>)
 80002c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c4:	080002e5 	.word	0x080002e5
 80002c8:	080002f1 	.word	0x080002f1
 80002cc:	080002fd 	.word	0x080002fd
 80002d0:	08000309 	.word	0x08000309
 80002d4:	08000315 	.word	0x08000315
 80002d8:	08000321 	.word	0x08000321
 80002dc:	0800032d 	.word	0x0800032d
 80002e0:	08000339 	.word	0x08000339
				{
					case 0:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //liga saida out1
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	488e      	ldr	r0, [pc, #568]	@ (8000524 <main+0x2f0>)
 80002ea:	f000 feb8 	bl	800105e <HAL_GPIO_WritePin>
						break;
 80002ee:	e02a      	b.n	8000346 <main+0x112>
					case 1:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //desliga saida out1
 80002f0:	2201      	movs	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	488b      	ldr	r0, [pc, #556]	@ (8000524 <main+0x2f0>)
 80002f6:	f000 feb2 	bl	800105e <HAL_GPIO_WritePin>
						break;
 80002fa:	e024      	b.n	8000346 <main+0x112>
					case 2:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); //liga saida out2
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	4888      	ldr	r0, [pc, #544]	@ (8000524 <main+0x2f0>)
 8000302:	f000 feac 	bl	800105e <HAL_GPIO_WritePin>
						break;
 8000306:	e01e      	b.n	8000346 <main+0x112>
					case 3:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //desliga saida out2
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4885      	ldr	r0, [pc, #532]	@ (8000524 <main+0x2f0>)
 800030e:	f000 fea6 	bl	800105e <HAL_GPIO_WritePin>
						break;
 8000312:	e018      	b.n	8000346 <main+0x112>
					case 4:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); //liga saida out3
 8000314:	2200      	movs	r2, #0
 8000316:	2104      	movs	r1, #4
 8000318:	4882      	ldr	r0, [pc, #520]	@ (8000524 <main+0x2f0>)
 800031a:	f000 fea0 	bl	800105e <HAL_GPIO_WritePin>
						break;
 800031e:	e012      	b.n	8000346 <main+0x112>
					case 5:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); //desliga saida out3
 8000320:	2201      	movs	r2, #1
 8000322:	2104      	movs	r1, #4
 8000324:	487f      	ldr	r0, [pc, #508]	@ (8000524 <main+0x2f0>)
 8000326:	f000 fe9a 	bl	800105e <HAL_GPIO_WritePin>
						break;
 800032a:	e00c      	b.n	8000346 <main+0x112>
					case 6:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //liga saida out4
 800032c:	2200      	movs	r2, #0
 800032e:	2108      	movs	r1, #8
 8000330:	487c      	ldr	r0, [pc, #496]	@ (8000524 <main+0x2f0>)
 8000332:	f000 fe94 	bl	800105e <HAL_GPIO_WritePin>
						break;
 8000336:	e006      	b.n	8000346 <main+0x112>
					case 7:
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); //desliga saida out4
 8000338:	2201      	movs	r2, #1
 800033a:	2108      	movs	r1, #8
 800033c:	4879      	ldr	r0, [pc, #484]	@ (8000524 <main+0x2f0>)
 800033e:	f000 fe8e 	bl	800105e <HAL_GPIO_WritePin>
						break;
 8000342:	e000      	b.n	8000346 <main+0x112>
					default:
						break;
 8000344:	bf00      	nop
				}
				char mensagem[50];
				snprintf(mensagem, sizeof(mensagem), "OK: %d\r\n", i);
 8000346:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800034a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800034e:	4a76      	ldr	r2, [pc, #472]	@ (8000528 <main+0x2f4>)
 8000350:	2132      	movs	r1, #50	@ 0x32
 8000352:	f002 f935 	bl	80025c0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)mensagem, strlen(mensagem), HAL_MAX_DELAY);
 8000356:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff62 	bl	8000224 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b29a      	uxth	r2, r3
 8000364:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	486b      	ldr	r0, [pc, #428]	@ (800051c <main+0x2e8>)
 800036e:	f001 febb 	bl	80020e8 <HAL_UART_Transmit>
				found = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
				break;
 8000378:	e008      	b.n	800038c <main+0x158>
		for (int i = 0; i < NUM_SAIDAS; i++)
 800037a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800037e:	3301      	adds	r3, #1
 8000380:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000388:	2b07      	cmp	r3, #7
 800038a:	dd86      	ble.n	800029a <main+0x66>
				}
			}

			// Ações para as entradas
			for (int i = 0; i < NUM_ENTRADAS; i++)
 800038c:	2300      	movs	r3, #0
 800038e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000392:	e069      	b.n	8000468 <main+0x234>
			{
				if (strstr(buffer, INT[i]) != NULL)
 8000394:	4a65      	ldr	r2, [pc, #404]	@ (800052c <main+0x2f8>)
 8000396:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800039a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 f947 	bl	8002638 <strstr>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d056      	beq.n	800045e <main+0x22a>
				{
				GPIO_PinState pinState;
				switch (i)
 80003b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d82f      	bhi.n	8000418 <main+0x1e4>
 80003b8:	a201      	add	r2, pc, #4	@ (adr r2, 80003c0 <main+0x18c>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003d1 	.word	0x080003d1
 80003c4:	080003e3 	.word	0x080003e3
 80003c8:	080003f5 	.word	0x080003f5
 80003cc:	08000407 	.word	0x08000407
					{
					case 0:
						pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // Leitura da entrada IN1
 80003d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003d4:	4856      	ldr	r0, [pc, #344]	@ (8000530 <main+0x2fc>)
 80003d6:	f000 fe2b 	bl	8001030 <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
						break;
 80003e0:	e01e      	b.n	8000420 <main+0x1ec>
					case 1:
						pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Leitura da entrada IN2
 80003e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e6:	4852      	ldr	r0, [pc, #328]	@ (8000530 <main+0x2fc>)
 80003e8:	f000 fe22 	bl	8001030 <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
						break;
 80003f2:	e015      	b.n	8000420 <main+0x1ec>
					case 2:
						pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // Leitura da entrada IN3
 80003f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f8:	484d      	ldr	r0, [pc, #308]	@ (8000530 <main+0x2fc>)
 80003fa:	f000 fe19 	bl	8001030 <HAL_GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
						break;
 8000404:	e00c      	b.n	8000420 <main+0x1ec>
					case 3:
						pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); // Leitura da entrada IN4
 8000406:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800040a:	4849      	ldr	r0, [pc, #292]	@ (8000530 <main+0x2fc>)
 800040c:	f000 fe10 	bl	8001030 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
						break;
 8000416:	e003      	b.n	8000420 <main+0x1ec>
					default:
						pinState = GPIO_PIN_RESET; // Valor padrão se o índice for inválido
 8000418:	2300      	movs	r3, #0
 800041a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
						break;
 800041e:	bf00      	nop
					}
					char pinMessage[50];
					snprintf(pinMessage, sizeof(pinMessage), "IN%d: %d\r\n", i + 1, pinState);
 8000420:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800042a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	4613      	mov	r3, r2
 8000432:	4a40      	ldr	r2, [pc, #256]	@ (8000534 <main+0x300>)
 8000434:	2132      	movs	r1, #50	@ 0x32
 8000436:	f002 f8c3 	bl	80025c0 <sniprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)pinMessage, strlen(pinMessage), HAL_MAX_DELAY);
 800043a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fef0 	bl	8000224 <strlen>
 8000444:	4603      	mov	r3, r0
 8000446:	b29a      	uxth	r2, r3
 8000448:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	4832      	ldr	r0, [pc, #200]	@ (800051c <main+0x2e8>)
 8000452:	f001 fe49 	bl	80020e8 <HAL_UART_Transmit>
					found = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
					break;
 800045c:	e008      	b.n	8000470 <main+0x23c>
			for (int i = 0; i < NUM_ENTRADAS; i++)
 800045e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000462:	3301      	adds	r3, #1
 8000464:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000468:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800046c:	2b03      	cmp	r3, #3
 800046e:	dd91      	ble.n	8000394 <main+0x160>
				}
			}

			if (!found)
 8000470:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000474:	2b00      	cmp	r3, #0
 8000476:	d127      	bne.n	80004c8 <main+0x294>
			{
				char mensagem[110];
				snprintf(mensagem, sizeof(mensagem), "NOK: %s\r\n", buffer);
 8000478:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800047c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000480:	4a2d      	ldr	r2, [pc, #180]	@ (8000538 <main+0x304>)
 8000482:	216e      	movs	r1, #110	@ 0x6e
 8000484:	f002 f89c 	bl	80025c0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)mensagem, strlen(mensagem), HAL_MAX_DELAY);
 8000488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff fec9 	bl	8000224 <strlen>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	481f      	ldr	r0, [pc, #124]	@ (800051c <main+0x2e8>)
 80004a0:	f001 fe22 	bl	80020e8 <HAL_UART_Transmit>

				char erro[50];
				snprintf(erro, sizeof(erro), "Invalid command.\n");
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4a25      	ldr	r2, [pc, #148]	@ (800053c <main+0x308>)
 80004a8:	2132      	movs	r1, #50	@ 0x32
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 f888 	bl	80025c0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)erro, strlen(erro), HAL_MAX_DELAY);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff feb6 	bl	8000224 <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	4816      	ldr	r0, [pc, #88]	@ (800051c <main+0x2e8>)
 80004c4:	f001 fe10 	bl	80020e8 <HAL_UART_Transmit>
			}

			index = 0; // Reseta o índice para a próxima palavra
 80004c8:	2300      	movs	r3, #0
 80004ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			memset(buffer, 0, sizeof(buffer)); // Limpa o buffer
 80004ce:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80004d2:	2264      	movs	r2, #100	@ 0x64
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f8a6 	bl	8002628 <memset>
 80004dc:	e6bd      	b.n	800025a <main+0x26>
		}

		else
		{
			buffer[index++] = dado; // Adiciona o caractere ao buffer
 80004de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80004e8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80004ec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80004f0:	443b      	add	r3, r7
 80004f2:	f803 2c78 	strb.w	r2, [r3, #-120]
			if (index >= sizeof(buffer) - 1) // Evita overflow do buffer
 80004f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80004fa:	2b62      	cmp	r3, #98	@ 0x62
 80004fc:	f67f aead 	bls.w	800025a <main+0x26>
			{
				index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
				memset(buffer, 0, sizeof(buffer));
 8000506:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800050a:	2264      	movs	r2, #100	@ 0x64
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f88a 	bl	8002628 <memset>
	HAL_UART_Receive(&huart1, &dado, 1, HAL_MAX_DELAY);
 8000514:	e6a1      	b.n	800025a <main+0x26>
 8000516:	bf00      	nop
 8000518:	200000a8 	.word	0x200000a8
 800051c:	200000f0 	.word	0x200000f0
 8000520:	20000000 	.word	0x20000000
 8000524:	40011000 	.word	0x40011000
 8000528:	08002fec 	.word	0x08002fec
 800052c:	20000020 	.word	0x20000020
 8000530:	40010c00 	.word	0x40010c00
 8000534:	08002ff8 	.word	0x08002ff8
 8000538:	08003004 	.word	0x08003004
 800053c:	08003010 	.word	0x08003010

08000540 <trim_whitespace>:
  }
  /* USER CODE END 3 */
}

void trim_whitespace(char *str)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	char *end;

	// Trim leading space
	while (isspace((unsigned char)*str)) str++;
 8000548:	e002      	b.n	8000550 <trim_whitespace+0x10>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <trim_whitespace+0x74>)
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f003 0308 	and.w	r3, r3, #8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f2      	bne.n	800054a <trim_whitespace+0xa>

	if (*str == 0)  // All spaces?
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d01e      	beq.n	80005aa <trim_whitespace+0x6a>
	return;

	// Trim trailing space
	end = str + strlen(str) - 1;
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff fe59 	bl	8000224 <strlen>
 8000572:	4603      	mov	r3, r0
 8000574:	3b01      	subs	r3, #1
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
	while (end > str && isspace((unsigned char)*end)) end--;
 800057c:	e002      	b.n	8000584 <trim_whitespace+0x44>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3b01      	subs	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d909      	bls.n	80005a0 <trim_whitespace+0x60>
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <trim_whitespace+0x74>)
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 0308 	and.w	r3, r3, #8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1ee      	bne.n	800057e <trim_whitespace+0x3e>

	// Write new null terminator
	*(end + 1) = '\0';
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e000      	b.n	80005ac <trim_whitespace+0x6c>
	return;
 80005aa:	bf00      	nop
}
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	0800304e 	.word	0x0800304e

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	@ 0x40
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2228      	movs	r2, #40	@ 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f82e 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fd4e 	bl	8001090 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005fa:	f000 f90f 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ffbc 	bl	8001594 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000622:	f000 f8fb 	bl	800081c <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3740      	adds	r7, #64	@ 0x40
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	@ 0x30
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 800065e:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <MX_TIM1_Init+0xcc>)
 8000660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 8000664:	2247      	movs	r2, #71	@ 0x47
 8000666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFFFFFF;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067c:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000688:	481b      	ldr	r0, [pc, #108]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 800068a:	f001 f911 	bl	80018b0 <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000694:	f000 f8c2 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4619      	mov	r1, r3
 80006a4:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 80006a6:	f001 f9ab 	bl	8001a00 <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80006b0:	f000 f8b4 	bl	800081c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80006b4:	2306      	movs	r3, #6
 80006b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 80006c4:	f001 fa63 	bl	8001b8e <HAL_TIM_SlaveConfigSynchro>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006ce:	f000 f8a5 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_TIM1_Init+0xc8>)
 80006e0:	f001 fc46 	bl	8001f70 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006ea:	f000 f897 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80006ee:	bf00      	nop
 80006f0:	3730      	adds	r7, #48	@ 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000a8 	.word	0x200000a8
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 fc86 	bl	8002048 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f86b 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000f0 	.word	0x200000f0
 8000750:	40013800 	.word	0x40013800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <MX_GPIO_Init+0xbc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a28      	ldr	r2, [pc, #160]	@ (8000810 <MX_GPIO_Init+0xbc>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <MX_GPIO_Init+0xbc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_GPIO_Init+0xbc>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <MX_GPIO_Init+0xbc>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_GPIO_Init+0xbc>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_GPIO_Init+0xbc>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1c      	ldr	r2, [pc, #112]	@ (8000810 <MX_GPIO_Init+0xbc>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_GPIO_Init+0xbc>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_GPIO_Init+0xbc>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a16      	ldr	r2, [pc, #88]	@ (8000810 <MX_GPIO_Init+0xbc>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_GPIO_Init+0xbc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	210f      	movs	r1, #15
 80007cc:	4811      	ldr	r0, [pc, #68]	@ (8000814 <MX_GPIO_Init+0xc0>)
 80007ce:	f000 fc46 	bl	800105e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007d2:	230f      	movs	r3, #15
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <MX_GPIO_Init+0xc0>)
 80007ea:	f000 fa8d 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007ee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_GPIO_Init+0xc4>)
 8000804:	f000 fa80 	bl	8000d08 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	40011000 	.word	0x40011000
 8000818:	40010c00 	.word	0x40010c00

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a09      	ldr	r2, [pc, #36]	@ (80008c0 <HAL_TIM_Base_MspInit+0x34>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000954 <HAL_UART_MspInit+0x8c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d131      	bne.n	800094c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <HAL_UART_MspInit+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <HAL_UART_MspInit+0x90>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_UART_MspInit+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_UART_MspInit+0x90>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <HAL_UART_MspInit+0x90>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_UART_MspInit+0x90>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <HAL_UART_MspInit+0x94>)
 800092e:	f000 f9eb 	bl	8000d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <HAL_UART_MspInit+0x94>)
 8000948:	f000 f9de 	bl	8000d08 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40013800 	.word	0x40013800
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f8aa 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f001 fe3c 	bl	8002664 <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000c000 	.word	0x2000c000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	20000138 	.word	0x20000138
 8000a20:	20000288 	.word	0x20000288

08000a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff fff8 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a36:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a09      	ldr	r2, [pc, #36]	@ (8000a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a4c:	4c09      	ldr	r4, [pc, #36]	@ (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f001 fe09 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fbe9 	bl	8000234 <main>
  bx lr
 8000a62:	4770      	bx	lr
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000a6c:	08003194 	.word	0x08003194
  ldr r2, =_sbss
 8000a70:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000a74:	20000288 	.word	0x20000288

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f907 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fec6 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f911 	bl	8000cee <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f8e7 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000030 	.word	0x20000030
 8000b00:	20000038 	.word	0x20000038
 8000b04:	20000034 	.word	0x20000034

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a03      	ldr	r2, [pc, #12]	@ (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000038 	.word	0x20000038
 8000b28:	2000013c 	.word	0x2000013c

08000b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	@ (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	2000013c 	.word	0x2000013c

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff90 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff49 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff5e 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff90 	bl	8000bf8 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffb0 	bl	8000c5c <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b08b      	sub	sp, #44	@ 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e179      	b.n	8001010 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8168 	bne.w	800100a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a96      	ldr	r2, [pc, #600]	@ (8000f98 <HAL_GPIO_Init+0x290>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d05e      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	@ (8000f98 <HAL_GPIO_Init+0x290>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d875      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	@ (8000f9c <HAL_GPIO_Init+0x294>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d058      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	@ (8000f9c <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d86f      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	@ (8000fa0 <HAL_GPIO_Init+0x298>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d052      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	@ (8000fa0 <HAL_GPIO_Init+0x298>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d869      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d62:	4a90      	ldr	r2, [pc, #576]	@ (8000fa4 <HAL_GPIO_Init+0x29c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d04c      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d68:	4a8e      	ldr	r2, [pc, #568]	@ (8000fa4 <HAL_GPIO_Init+0x29c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d863      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a8e      	ldr	r2, [pc, #568]	@ (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d046      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d74:	4a8c      	ldr	r2, [pc, #560]	@ (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d85d      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d82a      	bhi.n	8000dd4 <HAL_GPIO_Init+0xcc>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d859      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d82:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <HAL_GPIO_Init+0x80>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000ddd 	.word	0x08000ddd
 8000d90:	08000def 	.word	0x08000def
 8000d94:	08000e31 	.word	0x08000e31
 8000d98:	08000e37 	.word	0x08000e37
 8000d9c:	08000e37 	.word	0x08000e37
 8000da0:	08000e37 	.word	0x08000e37
 8000da4:	08000e37 	.word	0x08000e37
 8000da8:	08000e37 	.word	0x08000e37
 8000dac:	08000e37 	.word	0x08000e37
 8000db0:	08000e37 	.word	0x08000e37
 8000db4:	08000e37 	.word	0x08000e37
 8000db8:	08000e37 	.word	0x08000e37
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e37 	.word	0x08000e37
 8000dc4:	08000e37 	.word	0x08000e37
 8000dc8:	08000e37 	.word	0x08000e37
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000df9 	.word	0x08000df9
 8000dd4:	4a75      	ldr	r2, [pc, #468]	@ (8000fac <HAL_GPIO_Init+0x2a4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e029      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e024      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01f      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e01a      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e013      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e009      	b.n	8000e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e003      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          break;
 8000e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2bff      	cmp	r3, #255	@ 0xff
 8000e3c:	d801      	bhi.n	8000e42 <HAL_GPIO_Init+0x13a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	e001      	b.n	8000e46 <HAL_GPIO_Init+0x13e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	@ 0xff
 8000e4c:	d802      	bhi.n	8000e54 <HAL_GPIO_Init+0x14c>
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x152>
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	3b08      	subs	r3, #8
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	210f      	movs	r1, #15
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	6a39      	ldr	r1, [r7, #32]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80c1 	beq.w	800100a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e88:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	@ (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea0:	4a44      	ldr	r2, [pc, #272]	@ (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x204>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3b      	ldr	r2, [pc, #236]	@ (8000fbc <HAL_GPIO_Init+0x2b4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x200>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1fc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a39      	ldr	r2, [pc, #228]	@ (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1f8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a38      	ldr	r2, [pc, #224]	@ (8000fc8 <HAL_GPIO_Init+0x2c0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1f4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a37      	ldr	r2, [pc, #220]	@ (8000fcc <HAL_GPIO_Init+0x2c4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1f0>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x206>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1e:	4925      	ldr	r1, [pc, #148]	@ (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	4924      	ldr	r1, [pc, #144]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4920      	ldr	r1, [pc, #128]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	491a      	ldr	r1, [pc, #104]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4916      	ldr	r1, [pc, #88]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d025      	beq.n	8000fd4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4910      	ldr	r1, [pc, #64]	@ (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	e025      	b.n	8000fe2 <HAL_GPIO_Init+0x2da>
 8000f96:	bf00      	nop
 8000f98:	10320000 	.word	0x10320000
 8000f9c:	10310000 	.word	0x10310000
 8000fa0:	10220000 	.word	0x10220000
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	10120000 	.word	0x10120000
 8000fac:	10110000 	.word	0x10110000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	40011400 	.word	0x40011400
 8000fc8:	40011800 	.word	0x40011800
 8000fcc:	40011c00 	.word	0x40011c00
 8000fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4913      	ldr	r1, [pc, #76]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	490e      	ldr	r1, [pc, #56]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	4909      	ldr	r1, [pc, #36]	@ (800102c <HAL_GPIO_Init+0x324>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae7e 	bne.w	8000d1c <HAL_GPIO_Init+0x14>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	372c      	adds	r7, #44	@ 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e001      	b.n	8001052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800106e:	787b      	ldrb	r3, [r7, #1]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800107a:	e003      	b.n	8001084 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	041a      	lsls	r2, r3, #16
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e272      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8087 	beq.w	80011be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b0:	4b92      	ldr	r3, [pc, #584]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d00c      	beq.n	80010d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010bc:	4b8f      	ldr	r3, [pc, #572]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d112      	bne.n	80010ee <HAL_RCC_OscConfig+0x5e>
 80010c8:	4b8c      	ldr	r3, [pc, #560]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d4:	d10b      	bne.n	80010ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d6:	4b89      	ldr	r3, [pc, #548]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d06c      	beq.n	80011bc <HAL_RCC_OscConfig+0x12c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d168      	bne.n	80011bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e24c      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x76>
 80010f8:	4b80      	ldr	r3, [pc, #512]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a7f      	ldr	r2, [pc, #508]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e02e      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x98>
 800110e:	4b7b      	ldr	r3, [pc, #492]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a7a      	ldr	r2, [pc, #488]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b78      	ldr	r3, [pc, #480]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a77      	ldr	r2, [pc, #476]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0xbc>
 8001132:	4b72      	ldr	r3, [pc, #456]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a71      	ldr	r2, [pc, #452]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6f      	ldr	r3, [pc, #444]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6e      	ldr	r2, [pc, #440]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 800114c:	4b6b      	ldr	r3, [pc, #428]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6a      	ldr	r2, [pc, #424]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b68      	ldr	r3, [pc, #416]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a67      	ldr	r2, [pc, #412]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fcde 	bl	8000b2c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fcda 	bl	8000b2c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e200      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b5d      	ldr	r3, [pc, #372]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xe4>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcca 	bl	8000b2c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fcc6 	bl	8000b2c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	@ 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1ec      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x10c>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ca:	4b4c      	ldr	r3, [pc, #304]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011d6:	4b49      	ldr	r3, [pc, #292]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x18c>
 80011e2:	4b46      	ldr	r3, [pc, #280]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b43      	ldr	r3, [pc, #268]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x176>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1c0      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4939      	ldr	r1, [pc, #228]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fc7f 	bl	8000b2c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc7b 	bl	8000b2c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1a1      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4927      	ldr	r1, [pc, #156]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fc5e 	bl	8000b2c <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fc5a 	bl	8000b2c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e180      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d03a      	beq.n	8001314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d019      	beq.n	80012da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <HAL_RCC_OscConfig+0x274>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc3e 	bl	8000b2c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc3a 	bl	8000b2c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e160      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_RCC_OscConfig+0x26c>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 face 	bl	8001874 <RCC_Delay>
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_RCC_OscConfig+0x274>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc24 	bl	8000b2c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e6:	e00f      	b.n	8001308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc20 	bl	8000b2c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d908      	bls.n	8001308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e146      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	42420000 	.word	0x42420000
 8001304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	4b92      	ldr	r3, [pc, #584]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e9      	bne.n	80012e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a6 	beq.w	800146e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b8b      	ldr	r3, [pc, #556]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10d      	bne.n	800134e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b88      	ldr	r3, [pc, #544]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a87      	ldr	r2, [pc, #540]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b85      	ldr	r3, [pc, #532]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134e:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <HAL_RCC_OscConfig+0x4c8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d118      	bne.n	800138c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135a:	4b7f      	ldr	r3, [pc, #508]	@ (8001558 <HAL_RCC_OscConfig+0x4c8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a7e      	ldr	r2, [pc, #504]	@ (8001558 <HAL_RCC_OscConfig+0x4c8>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001366:	f7ff fbe1 	bl	8000b2c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136e:	f7ff fbdd 	bl	8000b2c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	@ 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e103      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	4b75      	ldr	r3, [pc, #468]	@ (8001558 <HAL_RCC_OscConfig+0x4c8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x312>
 8001394:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a6e      	ldr	r2, [pc, #440]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e02d      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x334>
 80013aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a69      	ldr	r2, [pc, #420]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	4b67      	ldr	r3, [pc, #412]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a66      	ldr	r2, [pc, #408]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	e01c      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x356>
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a60      	ldr	r2, [pc, #384]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	e00b      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb91 	bl	8000b2c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb8d 	bl	8000b2c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0b1      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ee      	beq.n	800140e <HAL_RCC_OscConfig+0x37e>
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb7b 	bl	8000b2c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb77 	bl	8000b2c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e09b      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	4b40      	ldr	r3, [pc, #256]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001462:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a3b      	ldr	r2, [pc, #236]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8087 	beq.w	8001586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001478:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d061      	beq.n	8001548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d146      	bne.n	800151a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b33      	ldr	r3, [pc, #204]	@ (800155c <HAL_RCC_OscConfig+0x4cc>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb4b 	bl	8000b2c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb47 	bl	8000b2c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e06d      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ac:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c0:	d108      	bne.n	80014d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	4921      	ldr	r1, [pc, #132]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a19      	ldr	r1, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	430b      	orrs	r3, r1
 80014e6:	491b      	ldr	r1, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x4cc>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb1b 	bl	8000b2c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fb17 	bl	8000b2c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e03d      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x46a>
 8001518:	e035      	b.n	8001586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_RCC_OscConfig+0x4cc>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb04 	bl	8000b2c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fb00 	bl	8000b2c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e026      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x498>
 8001546:	e01e      	b.n	8001586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e019      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
 8001554:	40021000 	.word	0x40021000
 8001558:	40007000 	.word	0x40007000
 800155c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_OscConfig+0x500>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	429a      	cmp	r2, r3
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0d0      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d910      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b67      	ldr	r3, [pc, #412]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0207 	bic.w	r2, r3, #7
 80015be:	4965      	ldr	r1, [pc, #404]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a52      	ldr	r2, [pc, #328]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d040      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d115      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e073      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06b      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4936      	ldr	r1, [pc, #216]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fa52 	bl	8000b2c <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fa4e 	bl	8000b2c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e053      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d210      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	4922      	ldr	r1, [pc, #136]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f821 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	490a      	ldr	r1, [pc, #40]	@ (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <HAL_RCC_ClockConfig+0x1cc>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_RCC_ClockConfig+0x1d0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9b0 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40022000 	.word	0x40022000
 8001758:	40021000 	.word	0x40021000
 800175c:	08003024 	.word	0x08003024
 8001760:	20000030 	.word	0x20000030
 8001764:	20000034 	.word	0x20000034

08001768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x30>
 8001792:	2b08      	cmp	r3, #8
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x36>
 8001796:	e027      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x98>)
 800179a:	613b      	str	r3, [r7, #16]
      break;
 800179c:	e027      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x94>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	0c5b      	lsrs	r3, r3, #17
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ca:	fb03 f202 	mul.w	r2, r3, r2
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e004      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	613b      	str	r3, [r7, #16]
      break;
 80017e6:	e002      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ea:	613b      	str	r3, [r7, #16]
      break;
 80017ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ee:	693b      	ldr	r3, [r7, #16]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	007a1200 	.word	0x007a1200
 8001804:	0800303c 	.word	0x0800303c
 8001808:	0800304c 	.word	0x0800304c
 800180c:	003d0900 	.word	0x003d0900

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b02      	ldr	r3, [pc, #8]	@ (8001820 <HAL_RCC_GetHCLKFreq+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000030 	.word	0x20000030

08001824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001828:	f7ff fff2 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	4903      	ldr	r1, [pc, #12]	@ (8001848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	08003034 	.word	0x08003034

0800184c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001850:	f7ff ffde 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	0adb      	lsrs	r3, r3, #11
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	@ (8001870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	08003034 	.word	0x08003034

08001874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <RCC_Delay+0x34>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <RCC_Delay+0x38>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0a5b      	lsrs	r3, r3, #9
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001890:	bf00      	nop
  }
  while (Delay --);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	60fa      	str	r2, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <RCC_Delay+0x1c>
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000030 	.word	0x20000030
 80018ac:	10624dd3 	.word	0x10624dd3

080018b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e041      	b.n	8001946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe ffd8 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f000 f990 	bl	8001c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d001      	beq.n	8001968 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e03c      	b.n	80019e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_TIM_Base_Start+0x9c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d018      	beq.n	80019ac <HAL_TIM_Base_Start+0x5c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <HAL_TIM_Base_Start+0xa0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_TIM_Base_Start+0x5c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198c:	d00e      	beq.n	80019ac <HAL_TIM_Base_Start+0x5c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_TIM_Base_Start+0xa4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_TIM_Base_Start+0x5c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_TIM_Base_Start+0xa8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_TIM_Base_Start+0x5c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <HAL_TIM_Base_Start+0xac>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d111      	bne.n	80019d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d010      	beq.n	80019e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ce:	e007      	b.n	80019e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40013400 	.word	0x40013400
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40000800 	.word	0x40000800
 80019fc:	40000c00 	.word	0x40000c00

08001a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_TIM_ConfigClockSource+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e0b4      	b.n	8001b86 <HAL_TIM_ConfigClockSource+0x186>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a54:	d03e      	beq.n	8001ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8001a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a5a:	f200 8087 	bhi.w	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a62:	f000 8086 	beq.w	8001b72 <HAL_TIM_ConfigClockSource+0x172>
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a6a:	d87f      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a6c:	2b70      	cmp	r3, #112	@ 0x70
 8001a6e:	d01a      	beq.n	8001aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8001a70:	2b70      	cmp	r3, #112	@ 0x70
 8001a72:	d87b      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a74:	2b60      	cmp	r3, #96	@ 0x60
 8001a76:	d050      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0x11a>
 8001a78:	2b60      	cmp	r3, #96	@ 0x60
 8001a7a:	d877      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a7c:	2b50      	cmp	r3, #80	@ 0x50
 8001a7e:	d03c      	beq.n	8001afa <HAL_TIM_ConfigClockSource+0xfa>
 8001a80:	2b50      	cmp	r3, #80	@ 0x50
 8001a82:	d873      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a84:	2b40      	cmp	r3, #64	@ 0x40
 8001a86:	d058      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0x13a>
 8001a88:	2b40      	cmp	r3, #64	@ 0x40
 8001a8a:	d86f      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a8c:	2b30      	cmp	r3, #48	@ 0x30
 8001a8e:	d064      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x15a>
 8001a90:	2b30      	cmp	r3, #48	@ 0x30
 8001a92:	d86b      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d060      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x15a>
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d867      	bhi.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d05c      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x15a>
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d05a      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x15a>
 8001aa4:	e062      	b.n	8001b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ab6:	f000 fa3b 	bl	8001f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	609a      	str	r2, [r3, #8]
      break;
 8001ad2:	e04f      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ae4:	f000 fa24 	bl	8001f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001af6:	609a      	str	r2, [r3, #8]
      break;
 8001af8:	e03c      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b06:	461a      	mov	r2, r3
 8001b08:	f000 f99b 	bl	8001e42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2150      	movs	r1, #80	@ 0x50
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f9f2 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001b18:	e02c      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b26:	461a      	mov	r2, r3
 8001b28:	f000 f9b9 	bl	8001e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2160      	movs	r1, #96	@ 0x60
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f9e2 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001b38:	e01c      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b46:	461a      	mov	r2, r3
 8001b48:	f000 f97b 	bl	8001e42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2140      	movs	r1, #64	@ 0x40
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f9d2 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001b58:	e00c      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f000 f9c9 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001b6a:	e003      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b70:	e000      	b.n	8001b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e031      	b.n	8001c0a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8b1 	bl	8001d20 <TIM_SlaveTimer_SetConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d009      	beq.n	8001bd8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e018      	b.n	8001c0a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001be6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bf6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a39      	ldr	r2, [pc, #228]	@ (8001d0c <TIM_Base_SetConfig+0xf8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <TIM_Base_SetConfig+0x40>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <TIM_Base_SetConfig+0xfc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00f      	beq.n	8001c54 <TIM_Base_SetConfig+0x40>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3a:	d00b      	beq.n	8001c54 <TIM_Base_SetConfig+0x40>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <TIM_Base_SetConfig+0x100>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <TIM_Base_SetConfig+0x40>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a34      	ldr	r2, [pc, #208]	@ (8001d18 <TIM_Base_SetConfig+0x104>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <TIM_Base_SetConfig+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a33      	ldr	r2, [pc, #204]	@ (8001d1c <TIM_Base_SetConfig+0x108>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d108      	bne.n	8001c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <TIM_Base_SetConfig+0xf8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <TIM_Base_SetConfig+0x82>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a27      	ldr	r2, [pc, #156]	@ (8001d10 <TIM_Base_SetConfig+0xfc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <TIM_Base_SetConfig+0x82>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7c:	d00b      	beq.n	8001c96 <TIM_Base_SetConfig+0x82>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a24      	ldr	r2, [pc, #144]	@ (8001d14 <TIM_Base_SetConfig+0x100>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <TIM_Base_SetConfig+0x82>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <TIM_Base_SetConfig+0x104>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <TIM_Base_SetConfig+0x82>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a22      	ldr	r2, [pc, #136]	@ (8001d1c <TIM_Base_SetConfig+0x108>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <TIM_Base_SetConfig+0xf8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <TIM_Base_SetConfig+0xc8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d10 <TIM_Base_SetConfig+0xfc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d103      	bne.n	8001ce4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f023 0201 	bic.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
  }
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40012c00 	.word	0x40012c00
 8001d10:	40013400 	.word	0x40013400
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00

08001d20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b70      	cmp	r3, #112	@ 0x70
 8001d68:	d01a      	beq.n	8001da0 <TIM_SlaveTimer_SetConfig+0x80>
 8001d6a:	2b70      	cmp	r3, #112	@ 0x70
 8001d6c:	d860      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d6e:	2b60      	cmp	r3, #96	@ 0x60
 8001d70:	d054      	beq.n	8001e1c <TIM_SlaveTimer_SetConfig+0xfc>
 8001d72:	2b60      	cmp	r3, #96	@ 0x60
 8001d74:	d85c      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d76:	2b50      	cmp	r3, #80	@ 0x50
 8001d78:	d046      	beq.n	8001e08 <TIM_SlaveTimer_SetConfig+0xe8>
 8001d7a:	2b50      	cmp	r3, #80	@ 0x50
 8001d7c:	d858      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d7e:	2b40      	cmp	r3, #64	@ 0x40
 8001d80:	d019      	beq.n	8001db6 <TIM_SlaveTimer_SetConfig+0x96>
 8001d82:	2b40      	cmp	r3, #64	@ 0x40
 8001d84:	d854      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d86:	2b30      	cmp	r3, #48	@ 0x30
 8001d88:	d055      	beq.n	8001e36 <TIM_SlaveTimer_SetConfig+0x116>
 8001d8a:	2b30      	cmp	r3, #48	@ 0x30
 8001d8c:	d850      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d051      	beq.n	8001e36 <TIM_SlaveTimer_SetConfig+0x116>
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d84c      	bhi.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04d      	beq.n	8001e36 <TIM_SlaveTimer_SetConfig+0x116>
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d04b      	beq.n	8001e36 <TIM_SlaveTimer_SetConfig+0x116>
 8001d9e:	e047      	b.n	8001e30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001db0:	f000 f8be 	bl	8001f30 <TIM_ETR_SetConfig>
      break;
 8001db4:	e040      	b.n	8001e38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d101      	bne.n	8001dc2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e03b      	b.n	8001e3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001de8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	621a      	str	r2, [r3, #32]
      break;
 8001e06:	e017      	b.n	8001e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e14:	461a      	mov	r2, r3
 8001e16:	f000 f814 	bl	8001e42 <TIM_TI1_ConfigInputStage>
      break;
 8001e1a:	e00d      	b.n	8001e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f000 f838 	bl	8001e9e <TIM_TI2_ConfigInputStage>
      break;
 8001e2e:	e003      	b.n	8001e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	75fb      	strb	r3, [r7, #23]
      break;
 8001e34:	e000      	b.n	8001e38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001e36:	bf00      	nop
  }

  return status;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f023 0201 	bic.w	r2, r3, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 030a 	bic.w	r3, r3, #10
 8001e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	621a      	str	r2, [r3, #32]
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b087      	sub	sp, #28
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f023 0210 	bic.w	r2, r3, #16
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001eda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f043 0307 	orr.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e050      	b.n	800202a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d018      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fde:	d00e      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	@ (800203c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10c      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4313      	orrs	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40013400 	.word	0x40013400
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e042      	b.n	80020e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fc2a 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa09 	bl	80024a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	d175      	bne.n	80021f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_UART_Transmit+0x2c>
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e06e      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2221      	movs	r2, #33	@ 0x21
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002126:	f7fe fd01 	bl	8000b2c <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002140:	d108      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e003      	b.n	800215c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800215c:	e02e      	b.n	80021bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f8df 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e03a      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3302      	adds	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e007      	b.n	80021ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1cb      	bne.n	800215e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	@ 0x40
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f8ab 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08a      	sub	sp, #40	@ 0x28
 8002202:	af02      	add	r7, sp, #8
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 8081 	bne.w	8002322 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Receive+0x2e>
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e079      	b.n	8002324 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2222      	movs	r2, #34	@ 0x22
 800223a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002244:	f7fe fc72 	bl	8000b2c <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225e:	d108      	bne.n	8002272 <HAL_UART_Receive+0x74>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e003      	b.n	800227a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800227a:	e047      	b.n	800230c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2200      	movs	r2, #0
 8002284:	2120      	movs	r1, #32
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f850 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e042      	b.n	8002324 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10c      	bne.n	80022be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	3302      	adds	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e01f      	b.n	80022fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c6:	d007      	beq.n	80022d8 <HAL_UART_Receive+0xda>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_UART_Receive+0xe8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e008      	b.n	80022f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1b2      	bne.n	800227c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233c:	e03b      	b.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d037      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe fbf1 	bl	8000b2c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	6a3a      	ldr	r2, [r7, #32]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <UART_WaitOnFlagUntilTimeout+0x30>
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e03a      	b.n	80023d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b80      	cmp	r3, #128	@ 0x80
 8002372:	d020      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b40      	cmp	r3, #64	@ 0x40
 8002378:	d01d      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b08      	cmp	r3, #8
 8002386:	d116      	bne.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f81d 	bl	80023de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2208      	movs	r2, #8
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4013      	ands	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d0b4      	beq.n	800233e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023de:	b480      	push	{r7}
 80023e0:	b095      	sub	sp, #84	@ 0x54
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f0:	e853 3f00 	ldrex	r3, [r3]
 80023f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002406:	643a      	str	r2, [r7, #64]	@ 0x40
 8002408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800240c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e5      	bne.n	80023e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3314      	adds	r3, #20
 8002420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	e853 3f00 	ldrex	r3, [r3]
 8002428:	61fb      	str	r3, [r7, #28]
   return(result);
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3314      	adds	r3, #20
 8002438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800243a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002442:	e841 2300 	strex	r3, r2, [r1]
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e5      	bne.n	800241a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	2b01      	cmp	r3, #1
 8002454:	d119      	bne.n	800248a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	330c      	adds	r3, #12
 800245c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e853 3f00 	ldrex	r3, [r3]
 8002464:	60bb      	str	r3, [r7, #8]
   return(result);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f023 0310 	bic.w	r3, r3, #16
 800246c:	647b      	str	r3, [r7, #68]	@ 0x44
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002476:	61ba      	str	r2, [r7, #24]
 8002478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	e841 2300 	strex	r3, r2, [r1]
 8002482:	613b      	str	r3, [r7, #16]
   return(result);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e5      	bne.n	8002456 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002498:	bf00      	nop
 800249a:	3754      	adds	r7, #84	@ 0x54
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024de:	f023 030c 	bic.w	r3, r3, #12
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2c      	ldr	r2, [pc, #176]	@ (80025b8 <UART_SetConfig+0x114>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d103      	bne.n	8002514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800250c:	f7ff f99e 	bl	800184c <HAL_RCC_GetPCLK2Freq>
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	e002      	b.n	800251a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002514:	f7ff f986 	bl	8001824 <HAL_RCC_GetPCLK1Freq>
 8002518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009a      	lsls	r2, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4a22      	ldr	r2, [pc, #136]	@ (80025bc <UART_SetConfig+0x118>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	0119      	lsls	r1, r3, #4
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <UART_SetConfig+0x118>)
 8002552:	fba3 0302 	umull	r0, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2064      	movs	r0, #100	@ 0x64
 800255a:	fb00 f303 	mul.w	r3, r0, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	3332      	adds	r3, #50	@ 0x32
 8002564:	4a15      	ldr	r2, [pc, #84]	@ (80025bc <UART_SetConfig+0x118>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002570:	4419      	add	r1, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	009a      	lsls	r2, r3, #2
 800257c:	441a      	add	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fbb2 f2f3 	udiv	r2, r2, r3
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <UART_SetConfig+0x118>)
 800258a:	fba3 0302 	umull	r0, r3, r3, r2
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2064      	movs	r0, #100	@ 0x64
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	3332      	adds	r3, #50	@ 0x32
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <UART_SetConfig+0x118>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	440a      	add	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40013800 	.word	0x40013800
 80025bc:	51eb851f 	.word	0x51eb851f

080025c0 <sniprintf>:
 80025c0:	b40c      	push	{r2, r3}
 80025c2:	b530      	push	{r4, r5, lr}
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <sniprintf+0x64>)
 80025c6:	1e0c      	subs	r4, r1, #0
 80025c8:	681d      	ldr	r5, [r3, #0]
 80025ca:	b09d      	sub	sp, #116	@ 0x74
 80025cc:	da08      	bge.n	80025e0 <sniprintf+0x20>
 80025ce:	238b      	movs	r3, #139	@ 0x8b
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	602b      	str	r3, [r5, #0]
 80025d6:	b01d      	add	sp, #116	@ 0x74
 80025d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025dc:	b002      	add	sp, #8
 80025de:	4770      	bx	lr
 80025e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80025e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025e8:	bf0c      	ite	eq
 80025ea:	4623      	moveq	r3, r4
 80025ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80025f0:	9304      	str	r3, [sp, #16]
 80025f2:	9307      	str	r3, [sp, #28]
 80025f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025f8:	9002      	str	r0, [sp, #8]
 80025fa:	9006      	str	r0, [sp, #24]
 80025fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002600:	4628      	mov	r0, r5
 8002602:	ab21      	add	r3, sp, #132	@ 0x84
 8002604:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002606:	a902      	add	r1, sp, #8
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	f000 f9a9 	bl	8002960 <_svfiprintf_r>
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	bfbc      	itt	lt
 8002612:	238b      	movlt	r3, #139	@ 0x8b
 8002614:	602b      	strlt	r3, [r5, #0]
 8002616:	2c00      	cmp	r4, #0
 8002618:	d0dd      	beq.n	80025d6 <sniprintf+0x16>
 800261a:	2200      	movs	r2, #0
 800261c:	9b02      	ldr	r3, [sp, #8]
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e7d9      	b.n	80025d6 <sniprintf+0x16>
 8002622:	bf00      	nop
 8002624:	2000003c 	.word	0x2000003c

08002628 <memset>:
 8002628:	4603      	mov	r3, r0
 800262a:	4402      	add	r2, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <strstr>:
 8002638:	780a      	ldrb	r2, [r1, #0]
 800263a:	b570      	push	{r4, r5, r6, lr}
 800263c:	b96a      	cbnz	r2, 800265a <strstr+0x22>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	429a      	cmp	r2, r3
 8002642:	d109      	bne.n	8002658 <strstr+0x20>
 8002644:	460c      	mov	r4, r1
 8002646:	4605      	mov	r5, r0
 8002648:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f6      	beq.n	800263e <strstr+0x6>
 8002650:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002654:	429e      	cmp	r6, r3
 8002656:	d0f7      	beq.n	8002648 <strstr+0x10>
 8002658:	3001      	adds	r0, #1
 800265a:	7803      	ldrb	r3, [r0, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <strstr+0x8>
 8002660:	4618      	mov	r0, r3
 8002662:	e7ec      	b.n	800263e <strstr+0x6>

08002664 <__errno>:
 8002664:	4b01      	ldr	r3, [pc, #4]	@ (800266c <__errno+0x8>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000003c 	.word	0x2000003c

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2600      	movs	r6, #0
 8002674:	4d0c      	ldr	r5, [pc, #48]	@ (80026a8 <__libc_init_array+0x38>)
 8002676:	4c0d      	ldr	r4, [pc, #52]	@ (80026ac <__libc_init_array+0x3c>)
 8002678:	1b64      	subs	r4, r4, r5
 800267a:	10a4      	asrs	r4, r4, #2
 800267c:	42a6      	cmp	r6, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	f000 fc78 	bl	8002f74 <_init>
 8002684:	2600      	movs	r6, #0
 8002686:	4d0a      	ldr	r5, [pc, #40]	@ (80026b0 <__libc_init_array+0x40>)
 8002688:	4c0a      	ldr	r4, [pc, #40]	@ (80026b4 <__libc_init_array+0x44>)
 800268a:	1b64      	subs	r4, r4, r5
 800268c:	10a4      	asrs	r4, r4, #2
 800268e:	42a6      	cmp	r6, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f855 3b04 	ldr.w	r3, [r5], #4
 8002698:	4798      	blx	r3
 800269a:	3601      	adds	r6, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a2:	4798      	blx	r3
 80026a4:	3601      	adds	r6, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	0800318c 	.word	0x0800318c
 80026ac:	0800318c 	.word	0x0800318c
 80026b0:	0800318c 	.word	0x0800318c
 80026b4:	08003190 	.word	0x08003190

080026b8 <__retarget_lock_acquire_recursive>:
 80026b8:	4770      	bx	lr

080026ba <__retarget_lock_release_recursive>:
 80026ba:	4770      	bx	lr

080026bc <_free_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	4605      	mov	r5, r0
 80026c0:	2900      	cmp	r1, #0
 80026c2:	d040      	beq.n	8002746 <_free_r+0x8a>
 80026c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026c8:	1f0c      	subs	r4, r1, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bfb8      	it	lt
 80026ce:	18e4      	addlt	r4, r4, r3
 80026d0:	f000 f8de 	bl	8002890 <__malloc_lock>
 80026d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <_free_r+0x8c>)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	b933      	cbnz	r3, 80026e8 <_free_r+0x2c>
 80026da:	6063      	str	r3, [r4, #4]
 80026dc:	6014      	str	r4, [r2, #0]
 80026de:	4628      	mov	r0, r5
 80026e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026e4:	f000 b8da 	b.w	800289c <__malloc_unlock>
 80026e8:	42a3      	cmp	r3, r4
 80026ea:	d908      	bls.n	80026fe <_free_r+0x42>
 80026ec:	6820      	ldr	r0, [r4, #0]
 80026ee:	1821      	adds	r1, r4, r0
 80026f0:	428b      	cmp	r3, r1
 80026f2:	bf01      	itttt	eq
 80026f4:	6819      	ldreq	r1, [r3, #0]
 80026f6:	685b      	ldreq	r3, [r3, #4]
 80026f8:	1809      	addeq	r1, r1, r0
 80026fa:	6021      	streq	r1, [r4, #0]
 80026fc:	e7ed      	b.n	80026da <_free_r+0x1e>
 80026fe:	461a      	mov	r2, r3
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	b10b      	cbz	r3, 8002708 <_free_r+0x4c>
 8002704:	42a3      	cmp	r3, r4
 8002706:	d9fa      	bls.n	80026fe <_free_r+0x42>
 8002708:	6811      	ldr	r1, [r2, #0]
 800270a:	1850      	adds	r0, r2, r1
 800270c:	42a0      	cmp	r0, r4
 800270e:	d10b      	bne.n	8002728 <_free_r+0x6c>
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	4401      	add	r1, r0
 8002714:	1850      	adds	r0, r2, r1
 8002716:	4283      	cmp	r3, r0
 8002718:	6011      	str	r1, [r2, #0]
 800271a:	d1e0      	bne.n	80026de <_free_r+0x22>
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4408      	add	r0, r1
 8002722:	6010      	str	r0, [r2, #0]
 8002724:	6053      	str	r3, [r2, #4]
 8002726:	e7da      	b.n	80026de <_free_r+0x22>
 8002728:	d902      	bls.n	8002730 <_free_r+0x74>
 800272a:	230c      	movs	r3, #12
 800272c:	602b      	str	r3, [r5, #0]
 800272e:	e7d6      	b.n	80026de <_free_r+0x22>
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	1821      	adds	r1, r4, r0
 8002734:	428b      	cmp	r3, r1
 8002736:	bf01      	itttt	eq
 8002738:	6819      	ldreq	r1, [r3, #0]
 800273a:	685b      	ldreq	r3, [r3, #4]
 800273c:	1809      	addeq	r1, r1, r0
 800273e:	6021      	streq	r1, [r4, #0]
 8002740:	6063      	str	r3, [r4, #4]
 8002742:	6054      	str	r4, [r2, #4]
 8002744:	e7cb      	b.n	80026de <_free_r+0x22>
 8002746:	bd38      	pop	{r3, r4, r5, pc}
 8002748:	20000284 	.word	0x20000284

0800274c <sbrk_aligned>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	4e0f      	ldr	r6, [pc, #60]	@ (800278c <sbrk_aligned+0x40>)
 8002750:	460c      	mov	r4, r1
 8002752:	6831      	ldr	r1, [r6, #0]
 8002754:	4605      	mov	r5, r0
 8002756:	b911      	cbnz	r1, 800275e <sbrk_aligned+0x12>
 8002758:	f000 fbaa 	bl	8002eb0 <_sbrk_r>
 800275c:	6030      	str	r0, [r6, #0]
 800275e:	4621      	mov	r1, r4
 8002760:	4628      	mov	r0, r5
 8002762:	f000 fba5 	bl	8002eb0 <_sbrk_r>
 8002766:	1c43      	adds	r3, r0, #1
 8002768:	d103      	bne.n	8002772 <sbrk_aligned+0x26>
 800276a:	f04f 34ff 	mov.w	r4, #4294967295
 800276e:	4620      	mov	r0, r4
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	1cc4      	adds	r4, r0, #3
 8002774:	f024 0403 	bic.w	r4, r4, #3
 8002778:	42a0      	cmp	r0, r4
 800277a:	d0f8      	beq.n	800276e <sbrk_aligned+0x22>
 800277c:	1a21      	subs	r1, r4, r0
 800277e:	4628      	mov	r0, r5
 8002780:	f000 fb96 	bl	8002eb0 <_sbrk_r>
 8002784:	3001      	adds	r0, #1
 8002786:	d1f2      	bne.n	800276e <sbrk_aligned+0x22>
 8002788:	e7ef      	b.n	800276a <sbrk_aligned+0x1e>
 800278a:	bf00      	nop
 800278c:	20000280 	.word	0x20000280

08002790 <_malloc_r>:
 8002790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002794:	1ccd      	adds	r5, r1, #3
 8002796:	f025 0503 	bic.w	r5, r5, #3
 800279a:	3508      	adds	r5, #8
 800279c:	2d0c      	cmp	r5, #12
 800279e:	bf38      	it	cc
 80027a0:	250c      	movcc	r5, #12
 80027a2:	2d00      	cmp	r5, #0
 80027a4:	4606      	mov	r6, r0
 80027a6:	db01      	blt.n	80027ac <_malloc_r+0x1c>
 80027a8:	42a9      	cmp	r1, r5
 80027aa:	d904      	bls.n	80027b6 <_malloc_r+0x26>
 80027ac:	230c      	movs	r3, #12
 80027ae:	6033      	str	r3, [r6, #0]
 80027b0:	2000      	movs	r0, #0
 80027b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800288c <_malloc_r+0xfc>
 80027ba:	f000 f869 	bl	8002890 <__malloc_lock>
 80027be:	f8d8 3000 	ldr.w	r3, [r8]
 80027c2:	461c      	mov	r4, r3
 80027c4:	bb44      	cbnz	r4, 8002818 <_malloc_r+0x88>
 80027c6:	4629      	mov	r1, r5
 80027c8:	4630      	mov	r0, r6
 80027ca:	f7ff ffbf 	bl	800274c <sbrk_aligned>
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	4604      	mov	r4, r0
 80027d2:	d158      	bne.n	8002886 <_malloc_r+0xf6>
 80027d4:	f8d8 4000 	ldr.w	r4, [r8]
 80027d8:	4627      	mov	r7, r4
 80027da:	2f00      	cmp	r7, #0
 80027dc:	d143      	bne.n	8002866 <_malloc_r+0xd6>
 80027de:	2c00      	cmp	r4, #0
 80027e0:	d04b      	beq.n	800287a <_malloc_r+0xea>
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	4639      	mov	r1, r7
 80027e6:	4630      	mov	r0, r6
 80027e8:	eb04 0903 	add.w	r9, r4, r3
 80027ec:	f000 fb60 	bl	8002eb0 <_sbrk_r>
 80027f0:	4581      	cmp	r9, r0
 80027f2:	d142      	bne.n	800287a <_malloc_r+0xea>
 80027f4:	6821      	ldr	r1, [r4, #0]
 80027f6:	4630      	mov	r0, r6
 80027f8:	1a6d      	subs	r5, r5, r1
 80027fa:	4629      	mov	r1, r5
 80027fc:	f7ff ffa6 	bl	800274c <sbrk_aligned>
 8002800:	3001      	adds	r0, #1
 8002802:	d03a      	beq.n	800287a <_malloc_r+0xea>
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	442b      	add	r3, r5
 8002808:	6023      	str	r3, [r4, #0]
 800280a:	f8d8 3000 	ldr.w	r3, [r8]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	bb62      	cbnz	r2, 800286c <_malloc_r+0xdc>
 8002812:	f8c8 7000 	str.w	r7, [r8]
 8002816:	e00f      	b.n	8002838 <_malloc_r+0xa8>
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	1b52      	subs	r2, r2, r5
 800281c:	d420      	bmi.n	8002860 <_malloc_r+0xd0>
 800281e:	2a0b      	cmp	r2, #11
 8002820:	d917      	bls.n	8002852 <_malloc_r+0xc2>
 8002822:	1961      	adds	r1, r4, r5
 8002824:	42a3      	cmp	r3, r4
 8002826:	6025      	str	r5, [r4, #0]
 8002828:	bf18      	it	ne
 800282a:	6059      	strne	r1, [r3, #4]
 800282c:	6863      	ldr	r3, [r4, #4]
 800282e:	bf08      	it	eq
 8002830:	f8c8 1000 	streq.w	r1, [r8]
 8002834:	5162      	str	r2, [r4, r5]
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	4630      	mov	r0, r6
 800283a:	f000 f82f 	bl	800289c <__malloc_unlock>
 800283e:	f104 000b 	add.w	r0, r4, #11
 8002842:	1d23      	adds	r3, r4, #4
 8002844:	f020 0007 	bic.w	r0, r0, #7
 8002848:	1ac2      	subs	r2, r0, r3
 800284a:	bf1c      	itt	ne
 800284c:	1a1b      	subne	r3, r3, r0
 800284e:	50a3      	strne	r3, [r4, r2]
 8002850:	e7af      	b.n	80027b2 <_malloc_r+0x22>
 8002852:	6862      	ldr	r2, [r4, #4]
 8002854:	42a3      	cmp	r3, r4
 8002856:	bf0c      	ite	eq
 8002858:	f8c8 2000 	streq.w	r2, [r8]
 800285c:	605a      	strne	r2, [r3, #4]
 800285e:	e7eb      	b.n	8002838 <_malloc_r+0xa8>
 8002860:	4623      	mov	r3, r4
 8002862:	6864      	ldr	r4, [r4, #4]
 8002864:	e7ae      	b.n	80027c4 <_malloc_r+0x34>
 8002866:	463c      	mov	r4, r7
 8002868:	687f      	ldr	r7, [r7, #4]
 800286a:	e7b6      	b.n	80027da <_malloc_r+0x4a>
 800286c:	461a      	mov	r2, r3
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	42a3      	cmp	r3, r4
 8002872:	d1fb      	bne.n	800286c <_malloc_r+0xdc>
 8002874:	2300      	movs	r3, #0
 8002876:	6053      	str	r3, [r2, #4]
 8002878:	e7de      	b.n	8002838 <_malloc_r+0xa8>
 800287a:	230c      	movs	r3, #12
 800287c:	4630      	mov	r0, r6
 800287e:	6033      	str	r3, [r6, #0]
 8002880:	f000 f80c 	bl	800289c <__malloc_unlock>
 8002884:	e794      	b.n	80027b0 <_malloc_r+0x20>
 8002886:	6005      	str	r5, [r0, #0]
 8002888:	e7d6      	b.n	8002838 <_malloc_r+0xa8>
 800288a:	bf00      	nop
 800288c:	20000284 	.word	0x20000284

08002890 <__malloc_lock>:
 8002890:	4801      	ldr	r0, [pc, #4]	@ (8002898 <__malloc_lock+0x8>)
 8002892:	f7ff bf11 	b.w	80026b8 <__retarget_lock_acquire_recursive>
 8002896:	bf00      	nop
 8002898:	2000027c 	.word	0x2000027c

0800289c <__malloc_unlock>:
 800289c:	4801      	ldr	r0, [pc, #4]	@ (80028a4 <__malloc_unlock+0x8>)
 800289e:	f7ff bf0c 	b.w	80026ba <__retarget_lock_release_recursive>
 80028a2:	bf00      	nop
 80028a4:	2000027c 	.word	0x2000027c

080028a8 <__ssputs_r>:
 80028a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028ac:	461f      	mov	r7, r3
 80028ae:	688e      	ldr	r6, [r1, #8]
 80028b0:	4682      	mov	sl, r0
 80028b2:	42be      	cmp	r6, r7
 80028b4:	460c      	mov	r4, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	680b      	ldr	r3, [r1, #0]
 80028ba:	d82d      	bhi.n	8002918 <__ssputs_r+0x70>
 80028bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80028c4:	d026      	beq.n	8002914 <__ssputs_r+0x6c>
 80028c6:	6965      	ldr	r5, [r4, #20]
 80028c8:	6909      	ldr	r1, [r1, #16]
 80028ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028ce:	eba3 0901 	sub.w	r9, r3, r1
 80028d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028d6:	1c7b      	adds	r3, r7, #1
 80028d8:	444b      	add	r3, r9
 80028da:	106d      	asrs	r5, r5, #1
 80028dc:	429d      	cmp	r5, r3
 80028de:	bf38      	it	cc
 80028e0:	461d      	movcc	r5, r3
 80028e2:	0553      	lsls	r3, r2, #21
 80028e4:	d527      	bpl.n	8002936 <__ssputs_r+0x8e>
 80028e6:	4629      	mov	r1, r5
 80028e8:	f7ff ff52 	bl	8002790 <_malloc_r>
 80028ec:	4606      	mov	r6, r0
 80028ee:	b360      	cbz	r0, 800294a <__ssputs_r+0xa2>
 80028f0:	464a      	mov	r2, r9
 80028f2:	6921      	ldr	r1, [r4, #16]
 80028f4:	f000 fafa 	bl	8002eec <memcpy>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80028fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	6126      	str	r6, [r4, #16]
 8002906:	444e      	add	r6, r9
 8002908:	6026      	str	r6, [r4, #0]
 800290a:	463e      	mov	r6, r7
 800290c:	6165      	str	r5, [r4, #20]
 800290e:	eba5 0509 	sub.w	r5, r5, r9
 8002912:	60a5      	str	r5, [r4, #8]
 8002914:	42be      	cmp	r6, r7
 8002916:	d900      	bls.n	800291a <__ssputs_r+0x72>
 8002918:	463e      	mov	r6, r7
 800291a:	4632      	mov	r2, r6
 800291c:	4641      	mov	r1, r8
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	f000 faac 	bl	8002e7c <memmove>
 8002924:	2000      	movs	r0, #0
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	1b9b      	subs	r3, r3, r6
 800292a:	60a3      	str	r3, [r4, #8]
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	4433      	add	r3, r6
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002936:	462a      	mov	r2, r5
 8002938:	f000 fae6 	bl	8002f08 <_realloc_r>
 800293c:	4606      	mov	r6, r0
 800293e:	2800      	cmp	r0, #0
 8002940:	d1e0      	bne.n	8002904 <__ssputs_r+0x5c>
 8002942:	4650      	mov	r0, sl
 8002944:	6921      	ldr	r1, [r4, #16]
 8002946:	f7ff feb9 	bl	80026bc <_free_r>
 800294a:	230c      	movs	r3, #12
 800294c:	f8ca 3000 	str.w	r3, [sl]
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	e7e9      	b.n	8002932 <__ssputs_r+0x8a>
	...

08002960 <_svfiprintf_r>:
 8002960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002964:	4698      	mov	r8, r3
 8002966:	898b      	ldrh	r3, [r1, #12]
 8002968:	4607      	mov	r7, r0
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	460d      	mov	r5, r1
 800296e:	4614      	mov	r4, r2
 8002970:	b09d      	sub	sp, #116	@ 0x74
 8002972:	d510      	bpl.n	8002996 <_svfiprintf_r+0x36>
 8002974:	690b      	ldr	r3, [r1, #16]
 8002976:	b973      	cbnz	r3, 8002996 <_svfiprintf_r+0x36>
 8002978:	2140      	movs	r1, #64	@ 0x40
 800297a:	f7ff ff09 	bl	8002790 <_malloc_r>
 800297e:	6028      	str	r0, [r5, #0]
 8002980:	6128      	str	r0, [r5, #16]
 8002982:	b930      	cbnz	r0, 8002992 <_svfiprintf_r+0x32>
 8002984:	230c      	movs	r3, #12
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	b01d      	add	sp, #116	@ 0x74
 800298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002992:	2340      	movs	r3, #64	@ 0x40
 8002994:	616b      	str	r3, [r5, #20]
 8002996:	2300      	movs	r3, #0
 8002998:	9309      	str	r3, [sp, #36]	@ 0x24
 800299a:	2320      	movs	r3, #32
 800299c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029a0:	2330      	movs	r3, #48	@ 0x30
 80029a2:	f04f 0901 	mov.w	r9, #1
 80029a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002b44 <_svfiprintf_r+0x1e4>
 80029ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029b2:	4623      	mov	r3, r4
 80029b4:	469a      	mov	sl, r3
 80029b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ba:	b10a      	cbz	r2, 80029c0 <_svfiprintf_r+0x60>
 80029bc:	2a25      	cmp	r2, #37	@ 0x25
 80029be:	d1f9      	bne.n	80029b4 <_svfiprintf_r+0x54>
 80029c0:	ebba 0b04 	subs.w	fp, sl, r4
 80029c4:	d00b      	beq.n	80029de <_svfiprintf_r+0x7e>
 80029c6:	465b      	mov	r3, fp
 80029c8:	4622      	mov	r2, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	4638      	mov	r0, r7
 80029ce:	f7ff ff6b 	bl	80028a8 <__ssputs_r>
 80029d2:	3001      	adds	r0, #1
 80029d4:	f000 80a7 	beq.w	8002b26 <_svfiprintf_r+0x1c6>
 80029d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029da:	445a      	add	r2, fp
 80029dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80029de:	f89a 3000 	ldrb.w	r3, [sl]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 809f 	beq.w	8002b26 <_svfiprintf_r+0x1c6>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295
 80029ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029f2:	f10a 0a01 	add.w	sl, sl, #1
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	9307      	str	r3, [sp, #28]
 80029fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a00:	4654      	mov	r4, sl
 8002a02:	2205      	movs	r2, #5
 8002a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a08:	484e      	ldr	r0, [pc, #312]	@ (8002b44 <_svfiprintf_r+0x1e4>)
 8002a0a:	f000 fa61 	bl	8002ed0 <memchr>
 8002a0e:	9a04      	ldr	r2, [sp, #16]
 8002a10:	b9d8      	cbnz	r0, 8002a4a <_svfiprintf_r+0xea>
 8002a12:	06d0      	lsls	r0, r2, #27
 8002a14:	bf44      	itt	mi
 8002a16:	2320      	movmi	r3, #32
 8002a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a1c:	0711      	lsls	r1, r2, #28
 8002a1e:	bf44      	itt	mi
 8002a20:	232b      	movmi	r3, #43	@ 0x2b
 8002a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a26:	f89a 3000 	ldrb.w	r3, [sl]
 8002a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a2c:	d015      	beq.n	8002a5a <_svfiprintf_r+0xfa>
 8002a2e:	4654      	mov	r4, sl
 8002a30:	2000      	movs	r0, #0
 8002a32:	f04f 0c0a 	mov.w	ip, #10
 8002a36:	9a07      	ldr	r2, [sp, #28]
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a3e:	3b30      	subs	r3, #48	@ 0x30
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d94b      	bls.n	8002adc <_svfiprintf_r+0x17c>
 8002a44:	b1b0      	cbz	r0, 8002a74 <_svfiprintf_r+0x114>
 8002a46:	9207      	str	r2, [sp, #28]
 8002a48:	e014      	b.n	8002a74 <_svfiprintf_r+0x114>
 8002a4a:	eba0 0308 	sub.w	r3, r0, r8
 8002a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	46a2      	mov	sl, r4
 8002a56:	9304      	str	r3, [sp, #16]
 8002a58:	e7d2      	b.n	8002a00 <_svfiprintf_r+0xa0>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	1d19      	adds	r1, r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	9103      	str	r1, [sp, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfbb      	ittet	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	f042 0202 	orrlt.w	r2, r2, #2
 8002a6c:	9307      	strge	r3, [sp, #28]
 8002a6e:	9307      	strlt	r3, [sp, #28]
 8002a70:	bfb8      	it	lt
 8002a72:	9204      	strlt	r2, [sp, #16]
 8002a74:	7823      	ldrb	r3, [r4, #0]
 8002a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a78:	d10a      	bne.n	8002a90 <_svfiprintf_r+0x130>
 8002a7a:	7863      	ldrb	r3, [r4, #1]
 8002a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a7e:	d132      	bne.n	8002ae6 <_svfiprintf_r+0x186>
 8002a80:	9b03      	ldr	r3, [sp, #12]
 8002a82:	3402      	adds	r4, #2
 8002a84:	1d1a      	adds	r2, r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	9203      	str	r2, [sp, #12]
 8002a8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a8e:	9305      	str	r3, [sp, #20]
 8002a90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002b48 <_svfiprintf_r+0x1e8>
 8002a94:	2203      	movs	r2, #3
 8002a96:	4650      	mov	r0, sl
 8002a98:	7821      	ldrb	r1, [r4, #0]
 8002a9a:	f000 fa19 	bl	8002ed0 <memchr>
 8002a9e:	b138      	cbz	r0, 8002ab0 <_svfiprintf_r+0x150>
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	9b04      	ldr	r3, [sp, #16]
 8002aa4:	eba0 000a 	sub.w	r0, r0, sl
 8002aa8:	4082      	lsls	r2, r0
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	3401      	adds	r4, #1
 8002aae:	9304      	str	r3, [sp, #16]
 8002ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	4825      	ldr	r0, [pc, #148]	@ (8002b4c <_svfiprintf_r+0x1ec>)
 8002ab8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002abc:	f000 fa08 	bl	8002ed0 <memchr>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d036      	beq.n	8002b32 <_svfiprintf_r+0x1d2>
 8002ac4:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <_svfiprintf_r+0x1f0>)
 8002ac6:	bb1b      	cbnz	r3, 8002b10 <_svfiprintf_r+0x1b0>
 8002ac8:	9b03      	ldr	r3, [sp, #12]
 8002aca:	3307      	adds	r3, #7
 8002acc:	f023 0307 	bic.w	r3, r3, #7
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	9303      	str	r3, [sp, #12]
 8002ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ad6:	4433      	add	r3, r6
 8002ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ada:	e76a      	b.n	80029b2 <_svfiprintf_r+0x52>
 8002adc:	460c      	mov	r4, r1
 8002ade:	2001      	movs	r0, #1
 8002ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ae4:	e7a8      	b.n	8002a38 <_svfiprintf_r+0xd8>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f04f 0c0a 	mov.w	ip, #10
 8002aec:	4619      	mov	r1, r3
 8002aee:	3401      	adds	r4, #1
 8002af0:	9305      	str	r3, [sp, #20]
 8002af2:	4620      	mov	r0, r4
 8002af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002af8:	3a30      	subs	r2, #48	@ 0x30
 8002afa:	2a09      	cmp	r2, #9
 8002afc:	d903      	bls.n	8002b06 <_svfiprintf_r+0x1a6>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0c6      	beq.n	8002a90 <_svfiprintf_r+0x130>
 8002b02:	9105      	str	r1, [sp, #20]
 8002b04:	e7c4      	b.n	8002a90 <_svfiprintf_r+0x130>
 8002b06:	4604      	mov	r4, r0
 8002b08:	2301      	movs	r3, #1
 8002b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b0e:	e7f0      	b.n	8002af2 <_svfiprintf_r+0x192>
 8002b10:	ab03      	add	r3, sp, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	462a      	mov	r2, r5
 8002b16:	4638      	mov	r0, r7
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <_svfiprintf_r+0x1f4>)
 8002b1a:	a904      	add	r1, sp, #16
 8002b1c:	f3af 8000 	nop.w
 8002b20:	1c42      	adds	r2, r0, #1
 8002b22:	4606      	mov	r6, r0
 8002b24:	d1d6      	bne.n	8002ad4 <_svfiprintf_r+0x174>
 8002b26:	89ab      	ldrh	r3, [r5, #12]
 8002b28:	065b      	lsls	r3, r3, #25
 8002b2a:	f53f af2d 	bmi.w	8002988 <_svfiprintf_r+0x28>
 8002b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b30:	e72c      	b.n	800298c <_svfiprintf_r+0x2c>
 8002b32:	ab03      	add	r3, sp, #12
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	462a      	mov	r2, r5
 8002b38:	4638      	mov	r0, r7
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <_svfiprintf_r+0x1f4>)
 8002b3c:	a904      	add	r1, sp, #16
 8002b3e:	f000 f87d 	bl	8002c3c <_printf_i>
 8002b42:	e7ed      	b.n	8002b20 <_svfiprintf_r+0x1c0>
 8002b44:	0800314f 	.word	0x0800314f
 8002b48:	08003155 	.word	0x08003155
 8002b4c:	08003159 	.word	0x08003159
 8002b50:	00000000 	.word	0x00000000
 8002b54:	080028a9 	.word	0x080028a9

08002b58 <_printf_common>:
 8002b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	4616      	mov	r6, r2
 8002b5e:	4698      	mov	r8, r3
 8002b60:	688a      	ldr	r2, [r1, #8]
 8002b62:	690b      	ldr	r3, [r1, #16]
 8002b64:	4607      	mov	r7, r0
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bfb8      	it	lt
 8002b6a:	4613      	movlt	r3, r2
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b72:	460c      	mov	r4, r1
 8002b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b78:	b10a      	cbz	r2, 8002b7e <_printf_common+0x26>
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	6033      	str	r3, [r6, #0]
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	0699      	lsls	r1, r3, #26
 8002b82:	bf42      	ittt	mi
 8002b84:	6833      	ldrmi	r3, [r6, #0]
 8002b86:	3302      	addmi	r3, #2
 8002b88:	6033      	strmi	r3, [r6, #0]
 8002b8a:	6825      	ldr	r5, [r4, #0]
 8002b8c:	f015 0506 	ands.w	r5, r5, #6
 8002b90:	d106      	bne.n	8002ba0 <_printf_common+0x48>
 8002b92:	f104 0a19 	add.w	sl, r4, #25
 8002b96:	68e3      	ldr	r3, [r4, #12]
 8002b98:	6832      	ldr	r2, [r6, #0]
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	42ab      	cmp	r3, r5
 8002b9e:	dc2b      	bgt.n	8002bf8 <_printf_common+0xa0>
 8002ba0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ba4:	6822      	ldr	r2, [r4, #0]
 8002ba6:	3b00      	subs	r3, #0
 8002ba8:	bf18      	it	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	0692      	lsls	r2, r2, #26
 8002bae:	d430      	bmi.n	8002c12 <_printf_common+0xba>
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bb8:	47c8      	blx	r9
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d023      	beq.n	8002c06 <_printf_common+0xae>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	6922      	ldr	r2, [r4, #16]
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf14      	ite	ne
 8002bca:	2500      	movne	r5, #0
 8002bcc:	6833      	ldreq	r3, [r6, #0]
 8002bce:	f04f 0600 	mov.w	r6, #0
 8002bd2:	bf08      	it	eq
 8002bd4:	68e5      	ldreq	r5, [r4, #12]
 8002bd6:	f104 041a 	add.w	r4, r4, #26
 8002bda:	bf08      	it	eq
 8002bdc:	1aed      	subeq	r5, r5, r3
 8002bde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002be2:	bf08      	it	eq
 8002be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bfc4      	itt	gt
 8002bec:	1a9b      	subgt	r3, r3, r2
 8002bee:	18ed      	addgt	r5, r5, r3
 8002bf0:	42b5      	cmp	r5, r6
 8002bf2:	d11a      	bne.n	8002c2a <_printf_common+0xd2>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e008      	b.n	8002c0a <_printf_common+0xb2>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4652      	mov	r2, sl
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	4638      	mov	r0, r7
 8002c00:	47c8      	blx	r9
 8002c02:	3001      	adds	r0, #1
 8002c04:	d103      	bne.n	8002c0e <_printf_common+0xb6>
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0e:	3501      	adds	r5, #1
 8002c10:	e7c1      	b.n	8002b96 <_printf_common+0x3e>
 8002c12:	2030      	movs	r0, #48	@ 0x30
 8002c14:	18e1      	adds	r1, r4, r3
 8002c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c20:	4422      	add	r2, r4
 8002c22:	3302      	adds	r3, #2
 8002c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c28:	e7c2      	b.n	8002bb0 <_printf_common+0x58>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	4641      	mov	r1, r8
 8002c30:	4638      	mov	r0, r7
 8002c32:	47c8      	blx	r9
 8002c34:	3001      	adds	r0, #1
 8002c36:	d0e6      	beq.n	8002c06 <_printf_common+0xae>
 8002c38:	3601      	adds	r6, #1
 8002c3a:	e7d9      	b.n	8002bf0 <_printf_common+0x98>

08002c3c <_printf_i>:
 8002c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c40:	7e0f      	ldrb	r7, [r1, #24]
 8002c42:	4691      	mov	r9, r2
 8002c44:	2f78      	cmp	r7, #120	@ 0x78
 8002c46:	4680      	mov	r8, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	469a      	mov	sl, r3
 8002c4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c52:	d807      	bhi.n	8002c64 <_printf_i+0x28>
 8002c54:	2f62      	cmp	r7, #98	@ 0x62
 8002c56:	d80a      	bhi.n	8002c6e <_printf_i+0x32>
 8002c58:	2f00      	cmp	r7, #0
 8002c5a:	f000 80d3 	beq.w	8002e04 <_printf_i+0x1c8>
 8002c5e:	2f58      	cmp	r7, #88	@ 0x58
 8002c60:	f000 80ba 	beq.w	8002dd8 <_printf_i+0x19c>
 8002c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c6c:	e03a      	b.n	8002ce4 <_printf_i+0xa8>
 8002c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c72:	2b15      	cmp	r3, #21
 8002c74:	d8f6      	bhi.n	8002c64 <_printf_i+0x28>
 8002c76:	a101      	add	r1, pc, #4	@ (adr r1, 8002c7c <_printf_i+0x40>)
 8002c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c7c:	08002cd5 	.word	0x08002cd5
 8002c80:	08002ce9 	.word	0x08002ce9
 8002c84:	08002c65 	.word	0x08002c65
 8002c88:	08002c65 	.word	0x08002c65
 8002c8c:	08002c65 	.word	0x08002c65
 8002c90:	08002c65 	.word	0x08002c65
 8002c94:	08002ce9 	.word	0x08002ce9
 8002c98:	08002c65 	.word	0x08002c65
 8002c9c:	08002c65 	.word	0x08002c65
 8002ca0:	08002c65 	.word	0x08002c65
 8002ca4:	08002c65 	.word	0x08002c65
 8002ca8:	08002deb 	.word	0x08002deb
 8002cac:	08002d13 	.word	0x08002d13
 8002cb0:	08002da5 	.word	0x08002da5
 8002cb4:	08002c65 	.word	0x08002c65
 8002cb8:	08002c65 	.word	0x08002c65
 8002cbc:	08002e0d 	.word	0x08002e0d
 8002cc0:	08002c65 	.word	0x08002c65
 8002cc4:	08002d13 	.word	0x08002d13
 8002cc8:	08002c65 	.word	0x08002c65
 8002ccc:	08002c65 	.word	0x08002c65
 8002cd0:	08002dad 	.word	0x08002dad
 8002cd4:	6833      	ldr	r3, [r6, #0]
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6032      	str	r2, [r6, #0]
 8002cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e09e      	b.n	8002e26 <_printf_i+0x1ea>
 8002ce8:	6833      	ldr	r3, [r6, #0]
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	1d19      	adds	r1, r3, #4
 8002cee:	6031      	str	r1, [r6, #0]
 8002cf0:	0606      	lsls	r6, r0, #24
 8002cf2:	d501      	bpl.n	8002cf8 <_printf_i+0xbc>
 8002cf4:	681d      	ldr	r5, [r3, #0]
 8002cf6:	e003      	b.n	8002d00 <_printf_i+0xc4>
 8002cf8:	0645      	lsls	r5, r0, #25
 8002cfa:	d5fb      	bpl.n	8002cf4 <_printf_i+0xb8>
 8002cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	da03      	bge.n	8002d0c <_printf_i+0xd0>
 8002d04:	232d      	movs	r3, #45	@ 0x2d
 8002d06:	426d      	negs	r5, r5
 8002d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d0c:	230a      	movs	r3, #10
 8002d0e:	4859      	ldr	r0, [pc, #356]	@ (8002e74 <_printf_i+0x238>)
 8002d10:	e011      	b.n	8002d36 <_printf_i+0xfa>
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	6833      	ldr	r3, [r6, #0]
 8002d16:	0608      	lsls	r0, r1, #24
 8002d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d1c:	d402      	bmi.n	8002d24 <_printf_i+0xe8>
 8002d1e:	0649      	lsls	r1, r1, #25
 8002d20:	bf48      	it	mi
 8002d22:	b2ad      	uxthmi	r5, r5
 8002d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d26:	6033      	str	r3, [r6, #0]
 8002d28:	bf14      	ite	ne
 8002d2a:	230a      	movne	r3, #10
 8002d2c:	2308      	moveq	r3, #8
 8002d2e:	4851      	ldr	r0, [pc, #324]	@ (8002e74 <_printf_i+0x238>)
 8002d30:	2100      	movs	r1, #0
 8002d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d36:	6866      	ldr	r6, [r4, #4]
 8002d38:	2e00      	cmp	r6, #0
 8002d3a:	bfa8      	it	ge
 8002d3c:	6821      	ldrge	r1, [r4, #0]
 8002d3e:	60a6      	str	r6, [r4, #8]
 8002d40:	bfa4      	itt	ge
 8002d42:	f021 0104 	bicge.w	r1, r1, #4
 8002d46:	6021      	strge	r1, [r4, #0]
 8002d48:	b90d      	cbnz	r5, 8002d4e <_printf_i+0x112>
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d04b      	beq.n	8002de6 <_printf_i+0x1aa>
 8002d4e:	4616      	mov	r6, r2
 8002d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d54:	fb03 5711 	mls	r7, r3, r1, r5
 8002d58:	5dc7      	ldrb	r7, [r0, r7]
 8002d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d5e:	462f      	mov	r7, r5
 8002d60:	42bb      	cmp	r3, r7
 8002d62:	460d      	mov	r5, r1
 8002d64:	d9f4      	bls.n	8002d50 <_printf_i+0x114>
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d10b      	bne.n	8002d82 <_printf_i+0x146>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	07df      	lsls	r7, r3, #31
 8002d6e:	d508      	bpl.n	8002d82 <_printf_i+0x146>
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	6861      	ldr	r1, [r4, #4]
 8002d74:	4299      	cmp	r1, r3
 8002d76:	bfde      	ittt	le
 8002d78:	2330      	movle	r3, #48	@ 0x30
 8002d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d82:	1b92      	subs	r2, r2, r6
 8002d84:	6122      	str	r2, [r4, #16]
 8002d86:	464b      	mov	r3, r9
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	f8cd a000 	str.w	sl, [sp]
 8002d90:	aa03      	add	r2, sp, #12
 8002d92:	f7ff fee1 	bl	8002b58 <_printf_common>
 8002d96:	3001      	adds	r0, #1
 8002d98:	d14a      	bne.n	8002e30 <_printf_i+0x1f4>
 8002d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9e:	b004      	add	sp, #16
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	2778      	movs	r7, #120	@ 0x78
 8002dae:	4832      	ldr	r0, [pc, #200]	@ (8002e78 <_printf_i+0x23c>)
 8002db0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	6831      	ldr	r1, [r6, #0]
 8002db8:	061f      	lsls	r7, r3, #24
 8002dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dbe:	d402      	bmi.n	8002dc6 <_printf_i+0x18a>
 8002dc0:	065f      	lsls	r7, r3, #25
 8002dc2:	bf48      	it	mi
 8002dc4:	b2ad      	uxthmi	r5, r5
 8002dc6:	6031      	str	r1, [r6, #0]
 8002dc8:	07d9      	lsls	r1, r3, #31
 8002dca:	bf44      	itt	mi
 8002dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8002dd0:	6023      	strmi	r3, [r4, #0]
 8002dd2:	b11d      	cbz	r5, 8002ddc <_printf_i+0x1a0>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	e7ab      	b.n	8002d30 <_printf_i+0xf4>
 8002dd8:	4826      	ldr	r0, [pc, #152]	@ (8002e74 <_printf_i+0x238>)
 8002dda:	e7e9      	b.n	8002db0 <_printf_i+0x174>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f023 0320 	bic.w	r3, r3, #32
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	e7f6      	b.n	8002dd4 <_printf_i+0x198>
 8002de6:	4616      	mov	r6, r2
 8002de8:	e7bd      	b.n	8002d66 <_printf_i+0x12a>
 8002dea:	6833      	ldr	r3, [r6, #0]
 8002dec:	6825      	ldr	r5, [r4, #0]
 8002dee:	1d18      	adds	r0, r3, #4
 8002df0:	6961      	ldr	r1, [r4, #20]
 8002df2:	6030      	str	r0, [r6, #0]
 8002df4:	062e      	lsls	r6, r5, #24
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	d501      	bpl.n	8002dfe <_printf_i+0x1c2>
 8002dfa:	6019      	str	r1, [r3, #0]
 8002dfc:	e002      	b.n	8002e04 <_printf_i+0x1c8>
 8002dfe:	0668      	lsls	r0, r5, #25
 8002e00:	d5fb      	bpl.n	8002dfa <_printf_i+0x1be>
 8002e02:	8019      	strh	r1, [r3, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	4616      	mov	r6, r2
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	e7bc      	b.n	8002d86 <_printf_i+0x14a>
 8002e0c:	6833      	ldr	r3, [r6, #0]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	1d1a      	adds	r2, r3, #4
 8002e12:	6032      	str	r2, [r6, #0]
 8002e14:	681e      	ldr	r6, [r3, #0]
 8002e16:	6862      	ldr	r2, [r4, #4]
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f859 	bl	8002ed0 <memchr>
 8002e1e:	b108      	cbz	r0, 8002e24 <_printf_i+0x1e8>
 8002e20:	1b80      	subs	r0, r0, r6
 8002e22:	6060      	str	r0, [r4, #4]
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	6123      	str	r3, [r4, #16]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e2e:	e7aa      	b.n	8002d86 <_printf_i+0x14a>
 8002e30:	4632      	mov	r2, r6
 8002e32:	4649      	mov	r1, r9
 8002e34:	4640      	mov	r0, r8
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	47d0      	blx	sl
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d0ad      	beq.n	8002d9a <_printf_i+0x15e>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	079b      	lsls	r3, r3, #30
 8002e42:	d413      	bmi.n	8002e6c <_printf_i+0x230>
 8002e44:	68e0      	ldr	r0, [r4, #12]
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	4298      	cmp	r0, r3
 8002e4a:	bfb8      	it	lt
 8002e4c:	4618      	movlt	r0, r3
 8002e4e:	e7a6      	b.n	8002d9e <_printf_i+0x162>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4632      	mov	r2, r6
 8002e54:	4649      	mov	r1, r9
 8002e56:	4640      	mov	r0, r8
 8002e58:	47d0      	blx	sl
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d09d      	beq.n	8002d9a <_printf_i+0x15e>
 8002e5e:	3501      	adds	r5, #1
 8002e60:	68e3      	ldr	r3, [r4, #12]
 8002e62:	9903      	ldr	r1, [sp, #12]
 8002e64:	1a5b      	subs	r3, r3, r1
 8002e66:	42ab      	cmp	r3, r5
 8002e68:	dcf2      	bgt.n	8002e50 <_printf_i+0x214>
 8002e6a:	e7eb      	b.n	8002e44 <_printf_i+0x208>
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	f104 0619 	add.w	r6, r4, #25
 8002e72:	e7f5      	b.n	8002e60 <_printf_i+0x224>
 8002e74:	08003160 	.word	0x08003160
 8002e78:	08003171 	.word	0x08003171

08002e7c <memmove>:
 8002e7c:	4288      	cmp	r0, r1
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	eb01 0402 	add.w	r4, r1, r2
 8002e84:	d902      	bls.n	8002e8c <memmove+0x10>
 8002e86:	4284      	cmp	r4, r0
 8002e88:	4623      	mov	r3, r4
 8002e8a:	d807      	bhi.n	8002e9c <memmove+0x20>
 8002e8c:	1e43      	subs	r3, r0, #1
 8002e8e:	42a1      	cmp	r1, r4
 8002e90:	d008      	beq.n	8002ea4 <memmove+0x28>
 8002e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e9a:	e7f8      	b.n	8002e8e <memmove+0x12>
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4402      	add	r2, r0
 8002ea0:	428a      	cmp	r2, r1
 8002ea2:	d100      	bne.n	8002ea6 <memmove+0x2a>
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002eae:	e7f7      	b.n	8002ea0 <memmove+0x24>

08002eb0 <_sbrk_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4d05      	ldr	r5, [pc, #20]	@ (8002ecc <_sbrk_r+0x1c>)
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	4608      	mov	r0, r1
 8002eba:	602b      	str	r3, [r5, #0]
 8002ebc:	f7fd fd7c 	bl	80009b8 <_sbrk>
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	d102      	bne.n	8002eca <_sbrk_r+0x1a>
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	b103      	cbz	r3, 8002eca <_sbrk_r+0x1a>
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	bd38      	pop	{r3, r4, r5, pc}
 8002ecc:	20000278 	.word	0x20000278

08002ed0 <memchr>:
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b510      	push	{r4, lr}
 8002ed4:	b2c9      	uxtb	r1, r1
 8002ed6:	4402      	add	r2, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	d101      	bne.n	8002ee2 <memchr+0x12>
 8002ede:	2000      	movs	r0, #0
 8002ee0:	e003      	b.n	8002eea <memchr+0x1a>
 8002ee2:	7804      	ldrb	r4, [r0, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	428c      	cmp	r4, r1
 8002ee8:	d1f6      	bne.n	8002ed8 <memchr+0x8>
 8002eea:	bd10      	pop	{r4, pc}

08002eec <memcpy>:
 8002eec:	440a      	add	r2, r1
 8002eee:	4291      	cmp	r1, r2
 8002ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ef4:	d100      	bne.n	8002ef8 <memcpy+0xc>
 8002ef6:	4770      	bx	lr
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002efe:	4291      	cmp	r1, r2
 8002f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f04:	d1f9      	bne.n	8002efa <memcpy+0xe>
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <_realloc_r>:
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	4680      	mov	r8, r0
 8002f0e:	4615      	mov	r5, r2
 8002f10:	460c      	mov	r4, r1
 8002f12:	b921      	cbnz	r1, 8002f1e <_realloc_r+0x16>
 8002f14:	4611      	mov	r1, r2
 8002f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1a:	f7ff bc39 	b.w	8002790 <_malloc_r>
 8002f1e:	b92a      	cbnz	r2, 8002f2c <_realloc_r+0x24>
 8002f20:	f7ff fbcc 	bl	80026bc <_free_r>
 8002f24:	2400      	movs	r4, #0
 8002f26:	4620      	mov	r0, r4
 8002f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f2c:	f000 f81a 	bl	8002f64 <_malloc_usable_size_r>
 8002f30:	4285      	cmp	r5, r0
 8002f32:	4606      	mov	r6, r0
 8002f34:	d802      	bhi.n	8002f3c <_realloc_r+0x34>
 8002f36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002f3a:	d8f4      	bhi.n	8002f26 <_realloc_r+0x1e>
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4640      	mov	r0, r8
 8002f40:	f7ff fc26 	bl	8002790 <_malloc_r>
 8002f44:	4607      	mov	r7, r0
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d0ec      	beq.n	8002f24 <_realloc_r+0x1c>
 8002f4a:	42b5      	cmp	r5, r6
 8002f4c:	462a      	mov	r2, r5
 8002f4e:	4621      	mov	r1, r4
 8002f50:	bf28      	it	cs
 8002f52:	4632      	movcs	r2, r6
 8002f54:	f7ff ffca 	bl	8002eec <memcpy>
 8002f58:	4621      	mov	r1, r4
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	f7ff fbae 	bl	80026bc <_free_r>
 8002f60:	463c      	mov	r4, r7
 8002f62:	e7e0      	b.n	8002f26 <_realloc_r+0x1e>

08002f64 <_malloc_usable_size_r>:
 8002f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f68:	1f18      	subs	r0, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfbc      	itt	lt
 8002f6e:	580b      	ldrlt	r3, [r1, r0]
 8002f70:	18c0      	addlt	r0, r0, r3
 8002f72:	4770      	bx	lr

08002f74 <_init>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	bf00      	nop
 8002f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7a:	bc08      	pop	{r3}
 8002f7c:	469e      	mov	lr, r3
 8002f7e:	4770      	bx	lr

08002f80 <_fini>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr
